name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, dom, curl, libxml, zip, intl
        coverage: xdebug
    
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install backend dependencies
      run: |
        cd backend
        composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run PHPCS (Code Style Check)
      run: |
        cd backend
        composer cs-check
    
    - name: Download PHPStan
      run: |
        cd backend
        mkdir -p tools
        curl -L -o tools/phpstan.phar https://github.com/phpstan/phpstan/releases/latest/download/phpstan.phar
        chmod +x tools/phpstan.phar
    
    - name: Run PHPStan (Static Analysis)
      run: |
        cd backend
        php tools/phpstan.phar analyse -c phpstan.neon
    
    - name: Run PHPUnit Tests
      run: |
        cd backend
        composer test-unit
    
    - name: Upload coverage reports
      if: matrix.php-version == '8.3'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-backend
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20, 21, 22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Check Node.js version
      run: |
        node --version
        npm --version
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run TypeScript check
      run: |
        cd frontend
        npm run type-check
    
    - name: Run tests
      run: |
        cd frontend
        npm run test:unit
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t backend-test .
    
    - name: Build nginx Docker image
      run: |
        docker build -f nginx/Dockerfile -t nginx-test .
    
    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
